import { StateBaseInterface } from "./StateBase";
import { StateObject } from "./StateObject";
export interface HasId<T> {
    id: T;
}
export declare type IdType<T> = T extends HasId<infer I> ? I : string;
export declare function newIntId(): number;
export declare function newStringId(): string;
export declare function stateTableMixin<T extends HasId<any>>(): {
    new (): {
        _isStateTable: boolean;
        _lastInsertId: IdType<T> | null;
        _keyDeleteListeners: (() => void)[];
        onKeyDelete(listener: () => void): () => void;
        ids(): any[];
        _subscribeIds(listener: (ids: IdType<T>[]) => void): () => void;
        map<R>(f: (o: StateObject<T>) => R): R[];
        flatMap<R_2>(f: (o: StateObject<T>) => R_2[]): R_2[];
        find(predicate: (o: StateObject<T>) => boolean): any;
        values(): IterableIterator<any>;
        _insertListeners: ((o: StateObject<T>) => void)[];
        onInsert(listener: (o: StateObject<T>) => void): () => void;
        onInsertInternal(listener: (o: StateObject<T>) => void): () => void;
        attach(fun: (o: StateObject<T>) => (() => void) | undefined): () => void;
        insert(value: T | StateObject<T>): StateObject<T>;
        clone(id: IdType<T>, newId_?: IdType<T> | undefined): StateObject<T>;
        set(id: IdType<T>, value: StateObject<T>): any;
        assertGet(id: IdType<T>): any;
        _get(id: IdType<T>): any;
        _set(id: IdType<T>, val: StateObject<T>): any;
        clear(): void;
        remove(id: IdType<T>): void;
        _isStateBase: boolean;
        __removed__: boolean;
        _proxifiedThis: any | null;
        _parent: any;
        _props: import("./prop").PropSpec & {
            _: StateObject<T>;
        } & import("./prop").StatePropIdentifiers2<StateObject<StateObject<T>>, never>;
        _subscribers: {
            [K: string]: ((value: any, key: IdType<T>) => void)[];
        };
        _thisSubscribers: ((value: any, key: IdType<T>) => void)[];
        _parentListener: (() => void) | null;
        _onChange(listener: (value: any, key: IdType<T>) => void): () => void;
        _removeListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
        _onRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
        _onRemoveInternal(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
        _beforeRemoveListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
        _onBeforeRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => void;
        _setProps(props: import("./prop").PropSpec): void;
        _getRootStateHistory(): import("./history").NoboHistory | null;
        _rootStateCache: import("./RootState").RootState<unknown> | null;
        _getRootState(): import("./RootState").RootState<unknown>;
        _rootStateAccess(path: string[]): any;
        _logger(): import("./log").Logger | null;
        _subscribeSelector<R_4>(selector: (t: any) => R_4, compute: (selected: R_4) => void, initCall?: boolean): void;
        _subscribe(listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
        _subscribeKey<K extends IdType<T>>(key: K, listener: (value: StateObject<T>, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
        _path(): string;
        _subscribeKeys(keys: IdType<T>[], listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
        _runNotification(listeners: any | ((...args: any[]) => void)[], ...args: any[]): void;
        _notifySubscribers<P extends IdType<T>>(propOrId: P, value: StateObject<T>): void;
        _notifyThisSubscribers(): void;
        _parentDispose: (() => void) | null;
        _childrenMap: Map<string, {
            _isStateBase: boolean;
            __removed__: boolean;
            _proxifiedThis: any | null;
            _parent: any;
            _props: import("./prop").PropSpec & {
                _: StateObject<T>;
            } & import("./prop").StatePropIdentifiers2<StateObject<StateObject<T>>, never>;
            _subscribers: {
                [K: string]: ((value: any, key: IdType<T>) => void)[];
            };
            _thisSubscribers: ((value: any, key: IdType<T>) => void)[];
            _parentListener: (() => void) | null;
            _onChange(listener: (value: any, key: IdType<T>) => void): () => void;
            _removeListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemoveInternal(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _beforeRemoveListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onBeforeRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => void;
            _setProps(props: import("./prop").PropSpec): void;
            _getRootStateHistory(): import("./history").NoboHistory | null;
            _rootStateCache: import("./RootState").RootState<unknown> | null;
            _getRootState(): import("./RootState").RootState<unknown>;
            _rootStateAccess(path: string[]): any;
            _logger(): import("./log").Logger | null;
            _subscribeSelector<R_5>(selector: (t: any) => R_5, compute: (selected: R_5) => void, initCall?: boolean): void;
            _subscribe(listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _subscribeKey<K_1 extends IdType<T>>(key: K_1, listener: (value: StateObject<T>, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _path(): string;
            _subscribeKeys(keys: IdType<T>[], listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _get<P_1 extends IdType<T>>(prop: P_1): StateObject<T>;
            _runNotification(listeners: any | ((...args: any[]) => void)[], ...args: any[]): void;
            _notifySubscribers<P_2 extends IdType<T>>(propOrId: P_2, value: StateObject<T>): void;
            _notifyThisSubscribers(): void;
            _parentDispose: (() => void) | null;
            _childrenMap: Map<string, any> | null;
            _children(): Map<string, any>;
            _registerChild<P_3 extends IdType<T>>(propOrId: P_3, child: StateObject<T>): void;
            _traverse(fun: (node: any) => void): void;
        }> | null;
        _children(): Map<string, {
            _isStateBase: boolean;
            __removed__: boolean;
            _proxifiedThis: any | null;
            _parent: any;
            _props: import("./prop").PropSpec & {
                _: StateObject<T>;
            } & import("./prop").StatePropIdentifiers2<StateObject<StateObject<T>>, never>;
            _subscribers: {
                [K: string]: ((value: any, key: IdType<T>) => void)[];
            };
            _thisSubscribers: ((value: any, key: IdType<T>) => void)[];
            _parentListener: (() => void) | null;
            _onChange(listener: (value: any, key: IdType<T>) => void): () => void;
            _removeListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemoveInternal(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _beforeRemoveListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onBeforeRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => void;
            _setProps(props: import("./prop").PropSpec): void;
            _getRootStateHistory(): import("./history").NoboHistory | null;
            _rootStateCache: import("./RootState").RootState<unknown> | null;
            _getRootState(): import("./RootState").RootState<unknown>;
            _rootStateAccess(path: string[]): any;
            _logger(): import("./log").Logger | null;
            _subscribeSelector<R_5>(selector: (t: any) => R_5, compute: (selected: R_5) => void, initCall?: boolean): void;
            _subscribe(listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _subscribeKey<K_1 extends IdType<T>>(key: K_1, listener: (value: StateObject<T>, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _path(): string;
            _subscribeKeys(keys: IdType<T>[], listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _get<P_1 extends IdType<T>>(prop: P_1): StateObject<T>;
            _runNotification(listeners: any | ((...args: any[]) => void)[], ...args: any[]): void;
            _notifySubscribers<P_2 extends IdType<T>>(propOrId: P_2, value: StateObject<T>): void;
            _notifyThisSubscribers(): void;
            _parentDispose: (() => void) | null;
            _childrenMap: Map<string, any> | null;
            _children(): Map<string, any>;
            _registerChild<P_3 extends IdType<T>>(propOrId: P_3, child: StateObject<T>): void;
            _traverse(fun: (node: any) => void): void;
        }>;
        _registerChild<P_4 extends IdType<T>>(propOrId: P_4, child: StateObject<T>): void;
        _traverse(fun: (node: {
            _isStateBase: boolean;
            __removed__: boolean;
            _proxifiedThis: any | null;
            _parent: any;
            _props: import("./prop").PropSpec & {
                _: StateObject<T>;
            } & import("./prop").StatePropIdentifiers2<StateObject<StateObject<T>>, never>;
            _subscribers: {
                [K: string]: ((value: any, key: IdType<T>) => void)[];
            };
            _thisSubscribers: ((value: any, key: IdType<T>) => void)[];
            _parentListener: (() => void) | null;
            _onChange(listener: (value: any, key: IdType<T>) => void): () => void;
            _removeListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onRemoveInternal(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _beforeRemoveListeners: ((o: Map<IdType<T>, StateObject<T>>) => void)[];
            _onBeforeRemove(listener: (o: Map<IdType<T>, StateObject<T>>) => void): () => void;
            _setProps(props: import("./prop").PropSpec): void;
            _getRootStateHistory(): import("./history").NoboHistory | null;
            _rootStateCache: import("./RootState").RootState<unknown> | null;
            _getRootState(): import("./RootState").RootState<unknown>;
            _rootStateAccess(path: string[]): any;
            _logger(): import("./log").Logger | null;
            _subscribeSelector<R_5>(selector: (t: any) => R_5, compute: (selected: R_5) => void, initCall?: boolean): void;
            _subscribe(listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _subscribeKey<K_1 extends IdType<T>>(key: K_1, listener: (value: StateObject<T>, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _path(): string;
            _subscribeKeys(keys: IdType<T>[], listener: (value: any, updatedKey: IdType<T>) => void, initCall?: boolean): () => void;
            _get<P_1 extends IdType<T>>(prop: P_1): StateObject<T>;
            _runNotification(listeners: any | ((...args: any[]) => void)[], ...args: any[]): void;
            _notifySubscribers<P_2 extends IdType<T>>(propOrId: P_2, value: StateObject<T>): void;
            _notifyThisSubscribers(): void;
            _parentDispose: (() => void) | null;
            _childrenMap: Map<string, any> | null;
            _children(): Map<string, any>;
            _registerChild<P_3 extends IdType<T>>(propOrId: P_3, child: StateObject<T>): void;
            _traverse(fun: any): void;
        }) => void): void;
        delete(key: any): boolean;
        forEach(callbackfn: (value: any, key: any, map: Map<any, any>) => void, thisArg?: any): void;
        get(key: any): any;
        has(key: any): boolean;
        readonly size: number;
        [Symbol.iterator](): IterableIterator<[any, any]>;
        entries(): IterableIterator<[any, any]>;
        keys(): IterableIterator<any>;
        readonly [Symbol.toStringTag]: string;
    };
    readonly [Symbol.species]: MapConstructor;
};
export interface StateTableInterface<T> extends StateBaseInterface<Map<IdType<T>, StateObject<T>>> {
    _isStateTable: boolean;
    ids(): IdType<T>[];
    map<R>(f: (o: StateObject<T>) => R): R[];
    flatMap<R>(f: (o: StateObject<T>) => R[]): R[];
    find(predicate: (o: StateObject<T>) => boolean): StateObject<T> | undefined;
    _subscribeIds(listener: (ids: IdType<T>[]) => void): () => void;
    _insertListeners: ((o: StateObject<T>) => void)[];
    onInsert(listener: (o: StateObject<T>) => void): () => void;
    attach(fun: (o: StateObject<T>) => (() => void) | void): () => void;
    insert(elt: T | StateObject<T>): StateObject<T>;
    clone(id: IdType<T>, newId?: IdType<T>): StateObject<T>;
    set(id: IdType<T>, value: StateObject<T>): StateTableInterface<T>;
    assertGet(id: IdType<T>): StateObject<T>;
    _get(id: IdType<T>): StateObject<T>;
    _set(id: IdType<T>, val: StateObject<T>): StateTableInterface<T>;
    remove(id: IdType<T>): void;
    onKeyDelete(listener: () => void): () => void;
}
export declare type StateTable<T> = StateTableInterface<T> & Map<IdType<T>, StateObject<T>>;
